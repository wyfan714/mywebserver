// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "crud.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "skiplist.h"
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::database_service;
using namespace std;


SkipList<string, string> skipList(10);
class crudHandler : virtual public crudIf {
 public:
  crudHandler() {
    // Your initialization goes here
  }

  int32_t insert_element(const std::string& key, const std::string& value) {
    // Your implementation goes here
    bool flag = skipList.insert_element(key, value);
    if (flag) return 1;
    else return 0;
  }

  void search_element(std::string& _return, const std::string& key) {
    // Your implementation goes here
    if (key == "") {
        _return = skipList.display_list();
    } else {
        _return = skipList.search_element(key);
    }
  }

  int32_t delete_element(const std::string& key) {
    // Your implementation goes here
    bool flag = skipList.delete_element(key);
    if (flag) return 1;
    else return 0;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<crudHandler> handler(new crudHandler());
  ::std::shared_ptr<TProcessor> processor(new crudProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

