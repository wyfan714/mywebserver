/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef crud_H
#define crud_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "skip_types.h"

namespace database_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class crudIf {
 public:
  virtual ~crudIf() {}
  virtual int32_t insert_element(const std::string& key, const std::string& value) = 0;
  virtual void search_element(std::string& _return, const std::string& key) = 0;
  virtual int32_t delete_element(const std::string& key) = 0;
};

class crudIfFactory {
 public:
  typedef crudIf Handler;

  virtual ~crudIfFactory() {}

  virtual crudIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(crudIf* /* handler */) = 0;
  };

class crudIfSingletonFactory : virtual public crudIfFactory {
 public:
  crudIfSingletonFactory(const ::std::shared_ptr<crudIf>& iface) : iface_(iface) {}
  virtual ~crudIfSingletonFactory() {}

  virtual crudIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(crudIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<crudIf> iface_;
};

class crudNull : virtual public crudIf {
 public:
  virtual ~crudNull() {}
  int32_t insert_element(const std::string& /* key */, const std::string& /* value */) override {
    int32_t _return = 0;
    return _return;
  }
  void search_element(std::string& /* _return */, const std::string& /* key */) override {
    return;
  }
  int32_t delete_element(const std::string& /* key */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _crud_insert_element_args__isset {
  _crud_insert_element_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _crud_insert_element_args__isset;

class crud_insert_element_args {
 public:

  crud_insert_element_args(const crud_insert_element_args&);
  crud_insert_element_args& operator=(const crud_insert_element_args&);
  crud_insert_element_args() noexcept
                           : key(),
                             value() {
  }

  virtual ~crud_insert_element_args() noexcept;
  std::string key;
  std::string value;

  _crud_insert_element_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const crud_insert_element_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const crud_insert_element_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_insert_element_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class crud_insert_element_pargs {
 public:


  virtual ~crud_insert_element_pargs() noexcept;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_insert_element_result__isset {
  _crud_insert_element_result__isset() : success(false) {}
  bool success :1;
} _crud_insert_element_result__isset;

class crud_insert_element_result {
 public:

  crud_insert_element_result(const crud_insert_element_result&) noexcept;
  crud_insert_element_result& operator=(const crud_insert_element_result&) noexcept;
  crud_insert_element_result() noexcept
                             : success(0) {
  }

  virtual ~crud_insert_element_result() noexcept;
  int32_t success;

  _crud_insert_element_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const crud_insert_element_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const crud_insert_element_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_insert_element_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_insert_element_presult__isset {
  _crud_insert_element_presult__isset() : success(false) {}
  bool success :1;
} _crud_insert_element_presult__isset;

class crud_insert_element_presult {
 public:


  virtual ~crud_insert_element_presult() noexcept;
  int32_t* success;

  _crud_insert_element_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _crud_search_element_args__isset {
  _crud_search_element_args__isset() : key(false) {}
  bool key :1;
} _crud_search_element_args__isset;

class crud_search_element_args {
 public:

  crud_search_element_args(const crud_search_element_args&);
  crud_search_element_args& operator=(const crud_search_element_args&);
  crud_search_element_args() noexcept
                           : key() {
  }

  virtual ~crud_search_element_args() noexcept;
  std::string key;

  _crud_search_element_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const crud_search_element_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const crud_search_element_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_search_element_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class crud_search_element_pargs {
 public:


  virtual ~crud_search_element_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_search_element_result__isset {
  _crud_search_element_result__isset() : success(false) {}
  bool success :1;
} _crud_search_element_result__isset;

class crud_search_element_result {
 public:

  crud_search_element_result(const crud_search_element_result&);
  crud_search_element_result& operator=(const crud_search_element_result&);
  crud_search_element_result() noexcept
                             : success() {
  }

  virtual ~crud_search_element_result() noexcept;
  std::string success;

  _crud_search_element_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const crud_search_element_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const crud_search_element_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_search_element_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_search_element_presult__isset {
  _crud_search_element_presult__isset() : success(false) {}
  bool success :1;
} _crud_search_element_presult__isset;

class crud_search_element_presult {
 public:


  virtual ~crud_search_element_presult() noexcept;
  std::string* success;

  _crud_search_element_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _crud_delete_element_args__isset {
  _crud_delete_element_args__isset() : key(false) {}
  bool key :1;
} _crud_delete_element_args__isset;

class crud_delete_element_args {
 public:

  crud_delete_element_args(const crud_delete_element_args&);
  crud_delete_element_args& operator=(const crud_delete_element_args&);
  crud_delete_element_args() noexcept
                           : key() {
  }

  virtual ~crud_delete_element_args() noexcept;
  std::string key;

  _crud_delete_element_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const crud_delete_element_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const crud_delete_element_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_delete_element_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class crud_delete_element_pargs {
 public:


  virtual ~crud_delete_element_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_delete_element_result__isset {
  _crud_delete_element_result__isset() : success(false) {}
  bool success :1;
} _crud_delete_element_result__isset;

class crud_delete_element_result {
 public:

  crud_delete_element_result(const crud_delete_element_result&) noexcept;
  crud_delete_element_result& operator=(const crud_delete_element_result&) noexcept;
  crud_delete_element_result() noexcept
                             : success(0) {
  }

  virtual ~crud_delete_element_result() noexcept;
  int32_t success;

  _crud_delete_element_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const crud_delete_element_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const crud_delete_element_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const crud_delete_element_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _crud_delete_element_presult__isset {
  _crud_delete_element_presult__isset() : success(false) {}
  bool success :1;
} _crud_delete_element_presult__isset;

class crud_delete_element_presult {
 public:


  virtual ~crud_delete_element_presult() noexcept;
  int32_t* success;

  _crud_delete_element_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class crudClient : virtual public crudIf {
 public:
  crudClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  crudClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t insert_element(const std::string& key, const std::string& value) override;
  void send_insert_element(const std::string& key, const std::string& value);
  int32_t recv_insert_element();
  void search_element(std::string& _return, const std::string& key) override;
  void send_search_element(const std::string& key);
  void recv_search_element(std::string& _return);
  int32_t delete_element(const std::string& key) override;
  void send_delete_element(const std::string& key);
  int32_t recv_delete_element();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class crudProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<crudIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (crudProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_insert_element(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search_element(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_element(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  crudProcessor(::std::shared_ptr<crudIf> iface) :
    iface_(iface) {
    processMap_["insert_element"] = &crudProcessor::process_insert_element;
    processMap_["search_element"] = &crudProcessor::process_search_element;
    processMap_["delete_element"] = &crudProcessor::process_delete_element;
  }

  virtual ~crudProcessor() {}
};

class crudProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  crudProcessorFactory(const ::std::shared_ptr< crudIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< crudIfFactory > handlerFactory_;
};

class crudMultiface : virtual public crudIf {
 public:
  crudMultiface(std::vector<std::shared_ptr<crudIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~crudMultiface() {}
 protected:
  std::vector<std::shared_ptr<crudIf> > ifaces_;
  crudMultiface() {}
  void add(::std::shared_ptr<crudIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t insert_element(const std::string& key, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert_element(key, value);
    }
    return ifaces_[i]->insert_element(key, value);
  }

  void search_element(std::string& _return, const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search_element(_return, key);
    }
    ifaces_[i]->search_element(_return, key);
    return;
  }

  int32_t delete_element(const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_element(key);
    }
    return ifaces_[i]->delete_element(key);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class crudConcurrentClient : virtual public crudIf {
 public:
  crudConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  crudConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t insert_element(const std::string& key, const std::string& value) override;
  int32_t send_insert_element(const std::string& key, const std::string& value);
  int32_t recv_insert_element(const int32_t seqid);
  void search_element(std::string& _return, const std::string& key) override;
  int32_t send_search_element(const std::string& key);
  void recv_search_element(std::string& _return, const int32_t seqid);
  int32_t delete_element(const std::string& key) override;
  int32_t send_delete_element(const std::string& key);
  int32_t recv_delete_element(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
